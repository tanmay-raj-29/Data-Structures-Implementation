gcd(n, m) = gcd(n, n + m)
For every x, there is a perfect square between [x, 2x]
https://atcoder.jp/contests/abc269/editorial/4854
// some tips and tricks for bits.
1) Check if the number is odd
X & 1 = 1
(Works because only the last bit remains after operation)

2) Same logic be extended to check if kth bit is set
(X >> k) & 1 = 1

3) Flip the kth bit
X = X ^ (1 << k)


4) Set and Unset Kth bit - Instead of XOR use OR/AND
X = X  |     (1 << k)
X = X & ~(1 << k)
5) Count set bits [Unlike other tips this one is C++ specific)
Use __builtin_popcountll, very fast.

6) Check if the number is a power of 2
X & (X - 1) = 0

(Power of 2 has only one bit set, what happens if we subtract one from such a number, think AND with that)

7) Super handy in solving problems many times
A + B = (A | B) + (A & B)

(Proof - OR counts every bit once, we want to count bit set in both twice, hence the additional AND too).
